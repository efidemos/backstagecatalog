apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: add-techdocs
  title: Add TechDocs for existing entity
  description: "Create a new PR with updated TechDocs."
spec:
  owner: unspecified # TODO: Define who the owner of this template is. This is likely the team who own the relationship with Roadie. e.g. group:customer-name/platform
  type: entity

  # These are the steps which are rendered in the frontend with the form input.
  parameters:
    - title: Select an Entity
      required:
        - entity
      properties:
        entity:
          type: string
          ui:field: EntityPicker
    - title: TechDocs Path
      required:
        - techDocsPathType
        - techDocsPath
      properties:
        techDocsPathType:
            title: Path Type
            type: string
            description: 'The path type to the TechDocs directory. This can be a directory in the repository using `dir`, or linked externally using `url`'
            default: dir
            enum:
              - dir
              - url
        techDocsPath:
          title: Path
          description: 'The path to the TechDocs directory. This can be a directory in the repository using `.` or `./custom-paths`, or linked externally with the URL'
          type: string
          default: '.'
    - title: TechDocs Contents
      dependencies:
        techDocsPathType:
          oneOf:
            - properties:
                techDocsPathType:
                  const: "dir"
                contents:
                  title: TechDocs Contents
                  type: string
                  description: Write the TechDocs using Markdown syntax. https://www.markdownguide.org/basic-syntax/
                  ui:widget: textarea
                  ui:options:
                    rows: 20
                  default: |
                    # Title
                    This is a placeholder TechDocs page. Here you will write your technical documentation for your software. This supports markdown, so get styling!

                    ## Getting Started
                    See how to use Markdown syntax at [this link](https://www.markdownguide.org/basic-syntax/).
              required:
                - contents
            - properties:
                techDocsPathType:
                  const: "url"
                noContents:
                  title: TechDocs Contents
                  type: string
                  default: No contents to add for TechDocs which are externally linked via URL.
                  readOnly: true
            

  # These are the steps that are executed in series in the scaffolder backend.
  steps:
    - id: backstageRequest
      name: Retrieve Entity information from Roadie
      action: http:backstage:request
      input:
        method: 'GET'
        path: "/catalog/entities/by-name/${{ parameters.entity | replace(':', '/') }}"
    - id: logResult
      action: debug:log
      name: Log identified manifest location
      input:
        message: "Retrieving catalog manifest from ${{ steps['backstageRequest'].output.body.metadata.annotations['backstage.io/managed-by-origin-location'] }}"
    - id: fetchCatalogManifest
      name: Fetch Catalog manifest file
      action: fetch:plain
      input:
        url: "${{ steps['backstageRequest'].output.body.metadata.annotations['backstage.io/managed-by-origin-location'] | replace('url:', '') | replace('catalog-info.yaml', '') }}"
        targetPath: 'fetch-folder'
    - id: moveManifestToWorkbench
      name: Move manifest file to a standalone location
      action: fs:rename
      input:
        files:
          - from: 'fetch-folder/catalog-info.yaml'
            to: './manifest-folder/catalog-info.yaml'
    - id: parseCatalogManifest
      name: Parse retrieved catalog manifest file
      action: roadiehq:utils:fs:parse
      input:
        path: './manifest-folder/catalog-info.yaml'
    - id: logResult
      name: Display current catalog manifest
      action: debug:log
      input:
        message: 'Catalog Manifest content: ${{ steps["parseCatalogManifest"].output.content }}'
    - id: identifyRepoAndOwner
      name: Identify repository and owner
      action: roadiehq:utils:jsonata
      input:
        data: "${{ steps['backstageRequest'].output.body }}"
        expression: '$.metadata.annotations.(
                      $slug := $substringAfter($."backstage.io/managed-by-location", "url:https://github.com/");
                      $owner := $substringBefore($slug, "/");
                      {
                          "slug": $slug,
                          "owner": $owner,
                          "repo": $substringBefore($substringAfter($slug & $owner & "/", "/"), "/")
                      }
                    )'
    - id: logResult
      name: Display retrieved params
      action: debug:log
      input:
        message: 'Creating a PR to repo ${{ steps["identifyRepoAndOwner"].output.result.repo }} owned by ${{ steps["identifyRepoAndOwner"].output.result.owner }}'
    - id: updateTechDocsAnnotation
      name: Update TechDocs annotation in catalog-info.yaml
      action: roadiehq:utils:jsonata:yaml:transform
      input:
        path: './manifest-folder/catalog-info.yaml'
        expression: '$ ~> | $.metadata.annotations | { "backstage.io/techdocs-ref": "${{parameters.techDocsPathType}}:${{parameters.techDocsPath}}" } |' 
    - id: writeTechDocsAnnotationToFile
      name: Write TechDocs annotation to file
      action: roadiehq:utils:fs:write
      input:
        path: './manifest-folder/catalog-info.yaml'
        content: ${{ steps["updateTechDocsAnnotation"].output.result }}
    - id: parseCatalogManifest
      name: Parse modified catalog manifest file
      action: roadiehq:utils:fs:parse
      input:
        path: './manifest-folder/catalog-info.yaml'
        parser: yaml
    - id: logResult
      name: Display modified catalog manifest
      action: debug:log
      input:
        message: 'Catalog Manifest content: ${{ steps["parseCatalogManifest"].output.content }}'
    - id: fetchMkdocsTemplateRoot
      name: Write Mkdocs to root path
      if: ${{ parameters.techDocsPath == '.' and parameters.techDocsPathType == 'dir' }}
      action: fetch:template
      input:
        url: ./skeleton
        templateFileExtension: .njk
        values:
          entity: ${{ steps["parseCatalogManifest"].output.content.metadata.name }}
          description: ${{ steps["parseCatalogManifest"].output.content.metadata.description }}
    - id: fetchMkdocsTemplateCustom
      name: Write Mkdocs to custom path
      if: ${{ parameters.techDocsPath != '.' and parameters.techDocsPathType == 'dir' }}
      action: fetch:template
      input:
        url: ./skeleton
        templateFileExtension: .njk
        targetPath: ./${{parameters.techDocsPath}}
        values:
          entity: ${{ steps["parseCatalogManifest"].output.content.metadata.name }}
          description: ${{ steps["parseCatalogManifest"].output.content.metadata.description }}
    - id: writeTechDocsContentsToFileRoot
      name: Write TechDocs to root path
      if: ${{ parameters.techDocsPath == '.' and parameters.techDocsPathType == 'dir' }}
      action: roadiehq:utils:fs:write
      input:
        path: './docs/index.md'
        content: ${{ parameters.contents }}
    - id: writeTechDocsContentsToFileCustom
      name: Write TechDocs to custom path
      if: ${{ parameters.techDocsPath != '.' and parameters.techDocsPathType == 'dir' }}
      action: roadiehq:utils:fs:write
      input:
        path: './${{ parameters.techDocsPath }}/index.md'
        content: ${{ parameters.contents }}
    - id: createPullRequest
      name: Create a pull request
      action: publish:github:pull-request
      input:
        sourcePath: ./manifest-folder/
        targetPath: ./
        repoUrl: github.com?repo=${{ steps["identifyRepoAndOwner"].output.result.repo }}&owner=${{ steps["identifyRepoAndOwner"].output.result.owner }}
        branchName: update-catalog-entry-${{ '' | now }}
        title: Add TechDocs for entity
        description: This PR adds the TechDocs for this entity
  
  # These are the outputs from the backend steps, and can be displayed in the frontend after completion.
  output:
    links:
      - title: View the pull request on GitHub
        icon: github
        url: ${{ steps['createPullRequest'].output.remoteUrl }}