apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: register-new-component
  title: Register your software with Roadie Backstage
  description: "Create a new PR with a catalog-info.yaml file with your software's details. Optionally configure additional integrations and TechDocs to be created and associated at time of registration."
spec:
  owner: group:techservices # Define who the owner of this template is. This is likely the team who own the relationship with Roadie. e.g. group:customer-name/platform
  type: service

  # These are the steps which are rendered in the frontend with the form input.
  parameters:
    - title: Component Details # Title of the first step.
      required:
        - name
        - description
        - type
        - lifecycle
        - owner
      properties:
        name:
          title: Component Name
          type: string
          description: The name of the component in Roadie Backstage, typically the same name used in the repository. This will be used to create a human readable title.

        description:
          title: Component Description
          decription: A Detailed decription allows for the component to be easily found and understood in Roadie Backstage.
          type: string

        type:
          title: Component Type
          type: string
          default: service
          enum: ['service', 'website', 'library', 'mobile', 'action', 'workflow', 'data-pipeline', 'model']

        lifecycle:
          title: Component Lifecycle
          type: string
          default: production
          enum: ['production', 'development', 'experimental', 'deprecated']

        owner:
          title: Component Owner
          type: string
          description: Team or User who owns the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]
        
        productOwner:
          title: Product Owner
          type: string
          description: Product owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: User
        
        system:
          title: System
          description: System to which the component belongs
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: System

    - title: Component Location # Title of the second step.
      required:
        - repoSlug
      properties:
        repoHost:
          type: string
          default: github.com
          ui:widget: hidden

        repoSlug:
          type: string
          ui:field: SelectFieldFromApi
          ui:options:
            title: Repository
            description: Choose the repository to be registered in your catalog.
            path: "proxy/github/api/orgs/efidemos/repos" # Add the name of your GitHub org. e.g. `/orgs/{reporOrg}/repos`
            params:
              per_page: '100'
              page: '{{ parameters.repoPage }}'
            valueSelector: "full_name"
            labelSelector: "name"

        repoPage:
          title: Page Number
          type: number
          default: 1

        entityTags:
          type: array
          ui:field: EntityTagsPicker

        entityLabels:
          title: Labels
          type: string
          description: References to other entities, e.g. developer.astrazeneca.com/TAG
        
        entityLinks:
          title: Links
          type: array
          minItems: 1
          ui:options:
            addable: true
            removable: true
          items:
            type: object
            properties:
              linkUrl:
                title: URL
                type: string
              linkTitle:
                title: Title
                type: string
              linkIcon:
                title: Icon
                type: string
              linkType:
                title: Type
                type: string

    - title: Component Relationships # Title of the third step
      properties:
        subcomponentOf:
          title: Subcomponent of
          type: array
          description: If this is part of another component, list what component it is part of
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Component
        
        dependsOn:
          title: Depends on
          type: array
          description: Dependencies the component has
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Component
        
        providesApis:
          title: Provides APIs
          type: array
          description: APIs provided by this component
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: API
        
        consumesApis:
          title: Consumes APIs
          type: array
          description: APIs consumed by this component
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: API

    - title: Integrations (optional) # Title of the fourth step.
      properties: #TODO: Specify any additional integrations associated with your repos.
        argoAppName:
          title: Argo CD App Name
          type: string

        pagerdutyServiceId:
          title: PagerDuty Service ID
          type: string

        ensableTechDocs:
          title: Enable TechDocs
          default: true
          type: boolean

      if:
        properties:
          ensableTechDocs:
            const: true
        required:
        - ensableTechDocs
      then:
        properties:
          techDocsPathType:
            title: Path Type
            type: string
            description: 'The path type to the TechDocs directory. This can be a directory in the repository using `dir``, or linked externally using `url`.'
            default: dir
            enum:
              - dir
              - url

          techDocsPath:
            title: Path
            description: 'The path to the TechDocs directory. This can be a directory in the repository using `.` or `./custom-paths`, or linked externally with the URL.'
            type: string
            default: '.'

  # These are the steps that are executed in series in the scaffolder backend.
  steps:
    - id: parse-repo-values
      name: Parse Repo Org and Slug from selected value.
      action: roadiehq:utils:jsonata
      input:
        data:
          item: ${{ parameters.repoSlug }}
        expression: "(
                        $Org := $substringBefore($.item, '/');
                        $Name := $substringAfter($.item, '/');
                        {
                          'gitHubOrg': $Org,
                          'repoName': $Name
                        }
                      )"
    - id: fetchCatalogTemplate
      action: fetch:template
      input:
        url: ./skeleton
        templateFileExtension: .njk
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          type: ${{ parameters.type }}
          productOwner: ${{ parameters.productOwner}}
          system: ${{ parameters.system }}
          repoSlug: ${{ parameters.repoSlug }}
          argoAppName: ${{ parameters.argoAppName }}
          pagerdutyServiceId: ${{ parameters.pagerdutyServiceId }}
          lifecycle: ${{ parameters.lifecycle }}
          techDocsPath: '${{parameters.techDocsPathType}}:${{parameters.techDocsPath}}'
          entityTags: ${{ parameters.entityTags }}
          entityLabels: ${{ parameters.entityLabels }}
          subcomponentOf: ${{ parameters.subcomponentOf }}
          dependsOn: ${{ parameters.dependsOn }}
          providesApis: ${{ parameters.providesApis }}
          consumesApis: ${{ parameters.consumesApis }}

    - id: fetchTechDocsTemplate
      name: Write TechDocs to root path
      if: ${{ parameters.ensableTechDocs and parameters.techDocsPath == '.' and parameters.techDocsPathType == 'dir' }}
      action: fetch:template
      input:
        url: ./techDocs
        templateFileExtension: .njk
        values:
          repoSlug: ${{ parameters.repoSlug }}
          techDocsBody: ${{ parameters.techDocsBody }}

    - id: fetchTechDocsTemplate
      name: Write TechDocs to custom path
      if: ${{ parameters.ensableTechDocs and parameters.techDocsPath != '.' and parameters.techDocsPathType == 'dir' }}
      action: fetch:template
      input:
        url: ./techDocs
        templateFileExtension: .njk
        targetPath: ./${{parameters.techDocsPath}}
        values:
          repoSlug: ${{ parameters.repoSlug }}
          techDocsBody: ${{ parameters.techDocsBody }}

    - id: createPullRequest
      name: createPullRequest
      action: publish:github:pull-request
      input:
        repoUrl: ${{ parameters.repoHost }}?owner=${{ steps['parse-repo-values'].output.result.gitHubOrg }}&repo=${{ steps['parse-repo-values'].output.result.repoName }}
        branchName: register-to-catalog-${{ '' | now }}
        title: Register software to Catalog
        description: This PR adds a metadata file about this catalog entity so that it can be registered in our software catalog, with optional integrations and TechDocs.
  
  # These are the outputs from the backend steps, and can be displayed in the frontend after completion.
  output:
    links:
      - title: View the pull request on GitHub
        icon: github
        url: ${{ steps['createPullRequest'].output.remoteUrl }}